{"dependencies":[{"uri":"file:///Developer/dart-24216/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///Developer/dart-24216/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"file:///Developer/dart-24216/dart-sdk/lib/core/errors.dart","name":"Error","id":"Error","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","name":"safeToString","id":"safeToString1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"16","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_objectToString","isPrivate":true,"id":"_objectToString1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"34","kind":"method"},{"name":"Error","id":"Error0()","line":"8","kind":"constructor"}],"line":"7","kind":"class"}],"line":"5","kind":"library"}],"uri":"Validate/lib/validate.dart","id":"validate","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Erster Satz\n\n<p>This class assists in validating arguments. The validation methods are\nbased along the following principles:\n<ul>\n  <li>An invalid {@code null} argument causes a {@link NullPointerError}.</li>\n  <li>A non-{@code null} argument causes an {@link IllegalArgumentException}.</li>\n  <li>An invalid index into an array/collection/map/string causes an {@link IndexOutOfBoundsException}.</li>\n</ul>\n\n<p>All exceptions messages are\n<a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax\">format strings</a>\nas defined by the Java platform. For example:</p>\n\n<pre>\nValidate.isTrue(i > 0, \"The value must be greater than zero\");\nValidate.notNull(surname, \"The surname must not be null\");\n</pre>\n\n\nConstructor. This class should not normally be instantiated.\n","uri":"Validate/lib/src/model/validate.dart","name":"Validate","id":"Validate","children":[{"returnType":{"refId":"void","name":"void"},"isStatic":true,"comment":"\n<p>Validate that the argument condition is {@code true}; otherwise\nthrowing an exception with the specified message. This method is useful when\nvalidating according to an arbitrary boolean expression, such as validating a\nprimitive number or using your own custom validation expression.</p>\n\n<pre>Validate.isTrue(i > 0.0, \"The value must be greater than zero: $value\");</pre>\n\n@param expression  the boolean expression to check\n@param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n@throws ArgumentError if expression is {@code false}\n","name":"isTrue","id":"isTrue2()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"expression","id":"expression","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_IS_TRUE_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"65","kind":"method"},{"isStatic":true,"comment":"\n<p>Validate that the specified argument is not {@code null};\notherwise throwing an exception.\n\n<pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n\n<p>The message of the exception is &quot;The validated object is\nnull&quot;.</p>\n\n@param object  the object to check\n@return the validated object (never {@code null} for method chaining)\n@throws NullPointerError if the object is {@code null}\n","name":"notNull","id":"notNull2()","children":[{"name":"object","id":"object","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_IS_NULL_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"87","kind":"method"},{"isStatic":true,"comment":"\n<p>Validate that the specified argument is neither {@code null}\nnor is empty (object must have isEmpty implemented); otherwise throwing an exception\nwith the specified message.\n\n<pre>Validate.notEmpty(myArray, \"The array must not be empty\");</pre>\n\n@param value  the value to check, validated not null by this method\n@param message  the exception message if invalid, not null\n@return the validated value (never {@code null} method for chaining)\n@throws NullPointerError if the array is {@code null}\n@throws ArgumentError if the array is empty\n","name":"notEmpty","id":"notEmpty2()","children":[{"name":"value","id":"value","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_NOT_EMPTY_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"111","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\n<p>Validate that the specified string is\nneither {@code null}, a length of zero (no characters), empty\nnor whitespace; otherwise throwing an exception with the specified\nmessage.\n\n<pre>Validate.notBlank(myString, \"The string must not be blank\");</pre>\n\n@param value  the string to check, validated not null by this method\n@param message  the exception message if invalid, not null\n@return the validated string\n@throws NullPointerError if the character sequence is {@code null}\n@throws ArgumentError if the character sequence is blank\n","name":"notBlank","id":"notBlank2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"value","id":"value","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_NOT_BLANK_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"143","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"isStatic":true,"comment":"\n<p>Validate that the specified argument array is neither\n{@code null} nor contains any elements that are {@code null};\notherwise throwing an exception with the specified message.\n\n<pre>Validate.noNullElements(myArray, \"The validated array contains null element\");</pre>\n\n<p>If the array is {@code null}, then the message in the exception\nis &quot;The validated object is null&quot;.</p>\n\n@param iterable  the Iterable to check, validated not null by this method\n@param message  the exception message if invalid, not null\n@return the validated iterable (never {@code null} method for chaining)\n@throws NullPointerError if the iterable is {@code null}\n@throws ArgumentError if an element is {@code null}\n","name":"noNullElements","id":"noNullElements2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"170","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"isStatic":true,"comment":"\n<p>Validates that the index is within the bounds of the argument\niterable; otherwise throwing an exception with the specified message.</p>\n\n<pre>Validate.validIndex(iterable, 2, \"The validated array index is invalid\");</pre>\n\n<p>If the array is {@code null}, then the message of the exception\nis &quot;The validated object is null&quot;.</p>\n\n@param iterable  the iterable to check, validated not null by this method\n@param index  the index to check\n@param message  the exception message if invalid, not null\n@return the validated iterable (never {@code null} for method chaining)\n@throws NullPointerError if the array is {@code null}\n@throws RangeError if the index is invalid\n","name":"validIndex","id":"validIndex3()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"203","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"comment":"\n<p>Validate that the stateful condition is {@code true}; otherwise\nthrowing an exception. This method is useful when validating according\nto an arbitrary boolean expression, such as validating a\nprimitive number or using your own custom validation expression.</p>\n\n<pre>\nValidate.validState(field > 0);\nValidate.validState(this.isOk());</pre>\n\n<p>The message of the exception is &quot;The validated state is\nfalse&quot;.</p>\n\n@param expression  the boolean expression to check\n@throws IllegalStateException if expression is {@code false}\n","name":"validState","id":"validState2()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"expression","id":"expression","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_VALID_STATE_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"232","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"comment":"\n<p>Validate that the specified argument character sequence matches the specified regular\nexpression pattern; otherwise throwing an exception.</p>\n\n<pre>Validate.matchesPattern(\"hi\", new RegExp(\"^test\\$\"));</pre>\n\n<p>The syntax of the pattern is the one used in the {@link RegExp} class.</p>\n\n@param input  the character sequence to validate, not null\n@param pattern  the regular expression pattern, not null\n@throws ArgumentError if the character sequence does not match the pattern\n","name":"matchesPattern","id":"matchesPattern3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"input","id":"input","kind":"param"},{"ref":{"refId":"dart.core/RegExp","name":"RegExp"},"name":"pattern","id":"pattern","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_MATCHES_PATTERN_EX","name":"message","id":"message","kind":"param"}],"line":"255","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"isEmail","id":"isEmail2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"input","id":"input","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_MATCHES_PATTERN_EX","name":"message","id":"message","kind":"param"}],"line":"261","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"isPassword","id":"isPassword2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"input","id":"input","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_MATCHES_PATTERN_EX","name":"message","id":"message","kind":"param"}],"line":"265","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"isAlphaNumeric","id":"isAlphaNumeric2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"input","id":"input","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_MATCHES_PATTERN_EX","name":"message","id":"message","kind":"param"}],"line":"269","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"isHex","id":"isHex2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"input","id":"input","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_MATCHES_PATTERN_EX","name":"message","id":"message","kind":"param"}],"line":"273","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"comment":"\n<p>Validate that the specified argument object fall between the two\ninclusive values specified; otherwise, throws an exception.</p>\n\n<pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n\n@param start  the inclusive start value, not null\n@param end  the inclusive end value, not null\n@param value  the object to validate, not null\n@throws ArgumentError if the value falls out of the boundaries\n","name":"inclusiveBetween","id":"inclusiveBetween4()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"value","id":"value","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"comment":"\n<p>Validate that the specified argument object fall between the two\nexclusive values specified; otherwise, throws an exception.</p>\n\n<pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n\n@param start  the exclusive start value, not null\n@param end  the exclusive end value, not null\n@param value  the object to validate, not null\n@throws ArgumentError if the value falls out of the boundaries\n","name":"exclusiveBetween","id":"exclusiveBetween4()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"value","id":"value","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"_DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE","name":"message","id":"message","kind":"param"}],"line":"311","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"PATTERN_EMAIL","id":"PATTERN_EMAIL","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"PATTERN_PW","id":"PATTERN_PW","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"PATTERN_ALPHANUMERIC","id":"PATTERN_ALPHANUMERIC","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"PATTERN_HEX","id":"PATTERN_HEX","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_IS_TRUE_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_IS_TRUE_EX_MESSAGE","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_IS_NULL_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_IS_NULL_EX_MESSAGE","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_NOT_EMPTY_MESSAGE","isPrivate":true,"id":"_DEFAULT_NOT_EMPTY_MESSAGE","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_NOT_BLANK_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_NOT_BLANK_EX_MESSAGE","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_VALID_STATE_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_VALID_STATE_EX_MESSAGE","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_MATCHES_PATTERN_EX","isPrivate":true,"id":"_DEFAULT_MATCHES_PATTERN_EX","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE","isPrivate":true,"id":"_DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE","line":"41","kind":"variable"}],"line":"26","kind":"class"},{"superclass":{"refId":"validate/ErrorMessage","name":"ErrorMessage"},"isThrowable":true,"uri":"Validate/lib/src/error/errors.dart","name":"NullPointerError","id":"NullPointerError","children":[{"name":"NullPointerError","id":"NullPointerError1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"14","kind":"constructor"}],"line":"13","kind":"class"},{"superclass":{"refId":"validate/ErrorMessage","name":"ErrorMessage"},"isThrowable":true,"uri":"Validate/lib/src/error/errors.dart","name":"IllegalStateError","id":"IllegalStateError","children":[{"name":"IllegalStateError","id":"IllegalStateError1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"10","kind":"constructor"}],"line":"9","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Error","name":"Error"},"isThrowable":true,"comment":"Possible Error thrown by Validate","uri":"Validate/lib/src/error/errors.dart","name":"ErrorMessage","id":"ErrorMessage","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"message","id":"message","line":"5","kind":"variable"},{"name":"ErrorMessage","id":"ErrorMessage1()","children":[{"initializedField":{"refId":"validate/ErrorMessage/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"6","kind":"constructor"}],"line":"4","kind":"class"}],"line":"1","kind":"library"}